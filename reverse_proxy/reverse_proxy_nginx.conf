user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$server_name: [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$host" "$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;
    access_log /dev/null;

    # Set client body size to 2M so NGINX allows sending bigger files #
    client_max_body_size 2M;

    # We are a reverse proxy, so we don't need sendfile.
    #sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # As we are a proxy we don't need it
    #gzip  on;

    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # set a default dynamic resolver which is the Docker internal DNS
    # MUST use variables or upstream for proxy_pass entries or else this may
    # cause the container to fail if any servers are unavailable
    resolver 127.0.0.11;

    # Letâ€™s not reveal server version
    server_tokens off;

# ENDPOINTS FOR EXTERNAL USAGE - LINK TO NLB ##################################
    # limited Django access, for external access
    server {
        listen       8443 ssl http2;
        server_name  console_public;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        set $django_target web-dev_console2:8000;
        set $media_target web-mediaserver:80;

        location / {
            proxy_pass http://$django_target;
        }

        location /media/ {
            rewrite    /media/(.+) /$1 break;
            proxy_pass http://$media_target;
        }

        location /admin/ {
            return 404;
        }

        # Redirect old PHP links / cached locations
        rewrite ^/console/home.php$ https://$http_host/summary/ permanent;
        rewrite ^/pages/login.php$ https://$http_host/accounts/login/ permanent;
        rewrite ^/pages/register.php$ https://$http_host/accounts/signup/ permanent;
        rewrite ^/pages/reset.php$ https://$http_host/password/reset/ permanent;
    }

    # limited API access, only chat and health ping
    server {
        listen       8444 ssl;
        server_name  api_public;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        set $api_target api-svc:8080;

        # default to 404
        location / {
            return 404;
        }

        # regex for a chat call
        location ~ ^/v1/ai/([0-9a-fA-F\-]+)/chat {
            proxy_pass http://$api_target;
        }

        # regex for update user variables
        location ~ ^/v1/ai/([0-9a-fA-F\-]+)/chat/setVariables {
            proxy_pass http://$api_target;
        }

        # regex for trigger user intents
        location ~ ^/v1/ai/([0-9a-fA-F\-]+)/chat/triggerIntent {
            proxy_pass http://$api_target;
        }

        # allow set entity
        location /v1/entity {
            proxy_pass http://$api_target;
        }

        # allow botstore calls
        location /v1/ui/botstore/ {
            proxy_pass http://$api_target;
        }

        # allow health ping
        location /v1/health/ping/ {
            proxy_pass http://$api_target;
        }

        # allow integration
        location /v1/integration/ {
            proxy_pass http://$api_target;
        }
    }

# ENDPOINTS FOR INTERNAL USAGE - LINK TO VPN ##################################
    # Django full access, to allow access to /admin
    server {
        listen       8501 ssl http2;
        server_name  console_admin;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        set $django_target web-dev_console2:8000;
        location / {
            proxy_pass http://$django_target;
        }
    }

    # full API access
    server {
        listen       8502 ssl;
        server_name  api_full;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        set $api_target api-svc:8080;

        location / {
            proxy_pass  http://$api_target;
        }
    }
}
